@mixin font($family: $font-family, $size: 14px, $colour: map-get($palette, greyOne), $spacing: normal, $height: 1.4) {
  font-family: $family;
  font-size: $size;
  font-style: normal;
  color: $colour;
  letter-spacing: $spacing;
  line-height: $height;
}

/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/
@mixin object-fit($fit: fill, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;
  @if $position {
    -o-object-position: $position;
    object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  } @else {
    font-family: 'object-fit: #{$fit}';
  }
}

/* image layout style */
@mixin imgLayout($ratioMobile: 100%, $ratioDesktop: 100%) {
  display: block;
  position: relative;
  width: 100%;
  &:after {
    padding-bottom: $ratioMobile;
    display: block;
    content: '';
    @include media-breakpoint-up(lg) {
      padding-bottom: $ratioDesktop;
    }
  }
  img {
    width: 100%;
    height: 100%;
    position: absolute;
    @include object-fit(cover, center);
  }
}
@mixin arrow($width: 2px, $padding: 5px, $color: map-get($palette, white), $degree: -45deg) {
  &:after {
    content: '';
    border: solid $color;
    border-width: 0 $width $width 0;
    display: block;
    padding: $padding;
    transform: rotate($degree);
    position: absolute;
  }
}

@mixin arrowAlt(
  $width: 40px,
  $height: 20px,
  $left: 0,
  $colorbefore: map-get($palette, purpleTwo),
  $colorafter: map-get($palette, offWhite)
) {
  position: relative;
  &:before,
  &:after {
    content: '';
    position: absolute;
    left: $left;
    width: 0;
    height: 0;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
    border-bottom: $height solid $colorbefore;
  }
  &:after {
    border-left: $width solid transparent;
    border-right: $width solid transparent;
    border-bottom: $height solid $colorafter;
  }
}

@mixin backgroundPattern(
  $color: map-get($palette, purpleTwo),
  $heightMobile: calc(100% + 60px),
  $heightDesktop: calc(100% + 120px),
  $widthMobile: 100vw,
  $widthDesktop: 100vw,
  $marginMobile: 30px,
  $marginDesktop: 60px
) {
  position: relative;
  margin: $marginMobile 0;
  @include media-breakpoint-up(lg) {
    margin: $marginDesktop 0;
  }
  &:after {
    z-index: -1;
    content: '';
    display: block;
    position: absolute;
    background-color: $color;
    height: $heightMobile;
    width: $widthMobile;
    top: 0 - $marginMobile;
    @include media-breakpoint-up(lg) {
      height: $heightDesktop;
      width: $widthDesktop;
      top: 0 - $marginDesktop;
    }
  }
}

@mixin readmore {
  position: relative;
  height: 180px;
  overflow: hidden;
  &.open {
    height: 100%;
    padding-bottom: 30px;

    &:after {
      display: none;
    }
    .readmore {
      &:after {
        transform: rotate(-135deg);
        bottom: 18px;
      }
    }
  }
  &:after {
    display: block;
    width: 100%;
    content: '';
    height: 67px;
    position: absolute;
    bottom: 44px;
    background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%);
  }
}

/* styles for readmore */
.hasReadmore .readmore {
  display: block;
}
.readmore {
  cursor: pointer;
  display: none;
  position: absolute;
  width: 100%;
  padding: 10px 0;
  height: 44px;
  background-color: map-get($palette, white);
  bottom: 0;
  left: 0;
  text-transform: uppercase;
  color: map-get($palette, purple);
  @include arrow($padding: 3px, $color: map-get($palette, purple), $degree: 45deg);
  &:after {
    bottom: 22px;
    left: 100px;
  }
}

@mixin formElement($name) {
  position: relative;
  .elementBg {
    display: block;
    position: absolute;
    width: calc(100% + 10px);
    height: calc(100% + 20px);
    top: 0;
    left: 0;
  }
  &:hover {
    .elementBg {
      &:before {
        display: inline-block;
        position: absolute;
        content: '';
        width: 42px;
        height: 42px;
        border-radius: 100%;
        background-color: map-get($palette, purpleTwo);
        top: -10px;
        left: 11px;
        z-index: 2;
      }
      &:after {
        display: inline-block;
        position: absolute;
        content: '';
        width: 100%;
        height: 100%;
        background-color: map-get($palette, purpleThree);
        top: -12px;
        left: 7px;
        border-radius: 5px;
        z-index: 0;
      }
    }
    input[type='#{$name}'] + label {
      &:after {
        display: none;
      }
    }
    input[type='#{$name}']:checked + label {
      &:after {
        display: inline-block;
      }
    }
    input[type='#{$name}']:disabled + label {
      &:after {
        display: inline-block;
      }
    }
    input[type='#{$name}']:disabled + label + .elementBg {
      &:before,
      &:after {
        background-color: map-get($palette, greyFive);
      }
    }
  }

  input[type='#{$name}'] {
    position: absolute;
    opacity: 0;
    left: 0;
  }
  label {
    padding-left: 40px;
    cursor: pointer;
    width: 100%;
    display: inline-block;
    margin: 0;
  }

  input[type='#{$name}'] + label {
    z-index: 10;
    @extend %#{$name}Btn;
  }
  input[type='#{$name}']:checked + label {
    @extend %#{$name}BtnChecked;

    + .elementBg {
      &:after {
        display: inline-block;
        position: absolute;
        content: '';
        width: 100%;
        height: 100%;
        background-color: map-get($palette, purpleThree);
        top: -12px;
        left: 7px;
        border-radius: 5px;
      }
    }
  }
  input[type='#{$name}']:disabled + label {
    color: map-get($palette, greySix);
  }
}

@mixin placeholder() {
  &::-webkit-input-placeholder {
    /* Chrome/Opera/Safari */
    @content;
  }
  &::-moz-placeholder {
    /* Firefox 19+ */
    @content;
  }
  &:-ms-input-placeholder {
    /* IE 10+ */
    @content;
  }
  &:-moz-placeholder {
    /* Firefox 18- */
    @content;
  }
}

@mixin ie() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}

@mixin ios() {
  @supports (-webkit-touch-callout: none) {
    @content;
  }
}
